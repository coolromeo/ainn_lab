'''#dls
import math
from collections import defaultdict
class Graph:
    def __init__(self,vertices):
        self.v=vertices
        self.graphList=defaultdict(list)
    def addEdge(self,u,v):
        self.graphList[u].append(v)
    def dls(self,depth,src,target):
        if src==target:
            return True
        if depth<=0:
            return False
        for i in self.graphList[src]:
            if self.dls(depth-1,i,target):
                return True
        return False

g=Graph(9)
g.addEdge(0,1)
g.addEdge(0,2)
g.addEdge(1,3)
g.addEdge(1,4)
g.addEdge(2,5)
g.addEdge(2,6)
g.addEdge(3,7)
g.addEdge(3,8)

depth=math.ceil(math.log(9,2))
reach=0
for i in range(depth):
    if g.dls(i,0,9):
        print("target is reachable", i)
        reach=1
        break
if reach==0:
    print("target not reachable")
    
    
'''#vaccum cleaner
import random 
room = [
    [1,1,1,1],
    [1,1,1,1],
    [1,1,1,1],
    [1,1,1,1]
    ]
def display(room):
    print(room)

x=0
y=0
print("inintially the room condition is: ")
while x<4:
    while y<4:
        room[x][y]=random.choice([0,1])
        y+=1
    x+=1
    y=0

display(room)    

print("room cleaning begins...")
x,y,z=0,0,0
while x<4:
    while y<4:
        if room[x][y]==1:
            room[x][y]=0
            print("hi i am present at",x,y)
            z+=1
        y+=1
    x+=1
    y=0

print("job done")
performance=100-((z/16)*100)
display(room)
print(f"performance is:{performance}")
'''

'''#min-max
import math
def minMax(depth,node,arr,maxTurn):
    if depth == math.ceil(math.log(len(arr),2)):
        return arr[node]
    if maxTurn:
        return max(minMax(depth+1,node*2,arr, 0),minMax(depth+1,node*2+1,arr, 0))
    else:
        return min(minMax(depth+1,node*2,arr, 1),minMax(depth+1,node*2+1,arr, 1))

arr=[5,3,7,4,2,1,9,8]      
print(f"final value is : {minMax(0,0,arr,1)}")
'''

'''#alpha beta
import math
mini,maxi=-1000,1000
def alphaBeta(depth,node,maxTurn,arr,alpha,beta):
    if depth == math.ceil(math.log(len(arr),2)):
        return arr[node]
    if maxTurn:
        best=mini
        for i in range(0,2):
            val=alphaBeta(depth+1,node*2+i,0,arr,alpha,beta)
            best=max(best,val)
            alpha=max(best,alpha)
            if alpha>=beta:
                break
        return best
    else:
        best=maxi
        for i in range(0,2):
            val=alphaBeta(depth+1,node*2+i,1,arr,alpha,beta)
            best=min(best,val)
            alpha=min(best,alpha)
            if alpha>=beta:
                break
        return best
        
arr=[5,3,7,4,2,1,9,8]      
print(f"final value is : {alphaBeta(0,0,1,arr,mini,maxi)}")  
'''    
